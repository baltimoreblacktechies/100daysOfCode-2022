{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"100 Days Of Code vs Baltimore Black Techies 2022 The challenge is to code at least one hour every day for the next 100 days . This is just a repository for members of BBT to share some of their projects, efforts and notes. Let's see if we can get 100 days of code together! FAQ: What Is The #100daysOfCode Challenge? 100 Days Of Code is a social media project, primarily on Twitter, that anyone can participate in via the #100daysOfCode hashtag. Developer Alex Kallaway started it in 2016 based on the idea that consistency is the path to mastery. Plus, the hashtag fosters a sense of community\u2014you can use it to see where others are at in their journey and to stay motivated to document your own. How Can I Participate? Do #100daysOfCode with the Baltimore Black Techies! Work your way through projects, or document your Tech journey\u2014either way, posting what you\u2019re learning each day is a great way to see your coding progress unfold and find support. We\u2019ll support you with encouraging messages along the way, and you\u2019ll have the entire <organization> online community to supplement your interactions. At the end of your 100 days coding with us, you\u2019ll get a host of experience and several friends that have taken part in this challenge. Two Main Rules Code minimum an hour every day for the next 100 days. Slack your progress every day with the Slack channel. Instructions Create a github account Fork our repo locally: https://github.com/baltimoreblacktechies/100daysOfCode-2022 Track the our repo as a remote (Optional) Create a branch and a folder with your name (ex. 100daysOfCode_YourName) Code daily and post to github and Slack on your progress Let's have fun and support everyone in their tech journey Current Status Legal The template and supporting code for this repo are licensed under the Apache License 2.0 ( TLDR legal here ). Folders under 100daysOfCode_* are licensed under their respective authors. Derivates of this project must link back to the original Baltimore Black Techie 100 Days of Code template (just keep this subsection folx), and are licensed under the good faith that sub-licensers will up hold some meaningful interpretation of our Code Of Conduct .","title":"100 Days Of Code vs Baltimore Black Techies"},{"location":"#100-days-of-code-vs-baltimore-black-techies","text":"","title":"100 Days Of Code vs Baltimore Black Techies"},{"location":"#2022","text":"The challenge is to code at least one hour every day for the next 100 days . This is just a repository for members of BBT to share some of their projects, efforts and notes. Let's see if we can get 100 days of code together!","title":"2022"},{"location":"#faq","text":"","title":"FAQ:"},{"location":"#what-is-the-100daysofcode-challenge","text":"100 Days Of Code is a social media project, primarily on Twitter, that anyone can participate in via the #100daysOfCode hashtag. Developer Alex Kallaway started it in 2016 based on the idea that consistency is the path to mastery. Plus, the hashtag fosters a sense of community\u2014you can use it to see where others are at in their journey and to stay motivated to document your own.","title":"What Is The #100daysOfCode Challenge?"},{"location":"#how-can-i-participate","text":"Do #100daysOfCode with the Baltimore Black Techies! Work your way through projects, or document your Tech journey\u2014either way, posting what you\u2019re learning each day is a great way to see your coding progress unfold and find support. We\u2019ll support you with encouraging messages along the way, and you\u2019ll have the entire <organization> online community to supplement your interactions. At the end of your 100 days coding with us, you\u2019ll get a host of experience and several friends that have taken part in this challenge.","title":"How Can I Participate?"},{"location":"#two-main-rules","text":"Code minimum an hour every day for the next 100 days. Slack your progress every day with the Slack channel.","title":"Two Main Rules"},{"location":"#instructions","text":"Create a github account Fork our repo locally: https://github.com/baltimoreblacktechies/100daysOfCode-2022 Track the our repo as a remote (Optional) Create a branch and a folder with your name (ex. 100daysOfCode_YourName) Code daily and post to github and Slack on your progress Let's have fun and support everyone in their tech journey","title":"Instructions"},{"location":"#current-status","text":"","title":"Current Status"},{"location":"#legal","text":"The template and supporting code for this repo are licensed under the Apache License 2.0 ( TLDR legal here ). Folders under 100daysOfCode_* are licensed under their respective authors. Derivates of this project must link back to the original Baltimore Black Techie 100 Days of Code template (just keep this subsection folx), and are licensed under the good faith that sub-licensers will up hold some meaningful interpretation of our Code Of Conduct .","title":"Legal"},{"location":"Los/","text":"Spent the hour starting the book Learn Bash The Hard Way to learn about Bash. Worked on the next chapter of Learn Bash The Hard Way. What I learned: You don't need quotes to declare a string var: e.g. MYSTRING=astring echo $MYSTRING --> astring Single quotes for vars means you don't actually call the var: e.g. MYSENTENCE='A sentence with MYSTRING in it' echo MYSENTENCE --> A sentence with $MYSTRING in it This is not true for globs ( ): e.g. MYGLOB=\" \" echo $MYGLOB --> Everything in my current directory When indexing arrays: I need curly brackets around the whole variable and index But the still goes outside of the whole declaration: e.g. {BASH_VERSINFO[0]} All simple vars in bash are really arrays with just 1 element in it Commas are one way to iterate through an array: e.g. echo ${BASH_VERSINFO[0,5]} --> x86_64-pc-linux-gnu (returns elements 0-5) Associative arrays are like dicts but look very messy; should prob avoid them Continued Learn Bash The Hard Way to cover functions. What I learned: vars have a global scope unless otherwise declared to declare limited scope, use \"local\": e.g. function myfunc { local myvar=\"Hi from inside the function\" echo myvar } --> if I call myvar outside the function, it won't work because it only exists inside the function \u201c cd - \u201d returns you to the previous directory you were in use \"builtin\" to call functions built into Bash Useful incase you make a function that conflicts in name with a builtin (like \"func cd()\") With clashes, the function, not builtin is used Use \"unset -f name_of_func\" to unset func name & remove the conflict (or \"-v\" to unset vars) \"declare -f\" outputs all funcs in my env (including their code) while \"declare -F\" just lists the funcs names Programs are executable files (think grep, vi, sed, etc) you can use \"which\" to see if it's a builtin or a func: e.g. \"which grep\" --> /usr/bin/grep means it's a program/binary file, not a builtin) fun fact: which is a binary file/program, not a builtin \"alias\" is a powerful tool for creating shortcuts to commands: e.g. \"alias python='python3'\" --> means that when I type \"python\", it'll open python3 for me \"typeset\" and \"declare\" have the same functionality, typeset is just obsolete","title":"docs/Los.md"},{"location":"dylan%21/","text":"100 Days of code a personal log by dylan! Day 0 Set up basic template for https://github.com/baltimoreblacktechies/100daysOfCode ! I have ideas for how to extend this based off previous work I've done. Day 1 Today I went to a Coffee and Code meetup at spark. I didn't really work too much during the time, but someone put me on to an interview question which they said couldn't be solved in a line of code. Lol, saying you can't do something is a sure-fire way of getting me to do it. Here's my line: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const ALPHABET_SOUP = p =>(( nxn ,... P )=>(( _ , m , W , A )=> W . map ( w =>(( f , v , e )=> console . log ( w ,( L = c => f (( Z = ( a , b )=> A ( a ,( _ , i )=> Array ( b ). fill ( i )))( x , y ))[ e ][ c ] + \":\" + ( f ( T ( Z ( y , x )))[ e ][ c ]))( v ), L ( v + w . length - 1 )))(...[[ m => m ], [ R = m => m . map ( r =>[ ... r ][ \"r\" + \"everse\" ]())],[ T = m => m . map (( _ , i )=> m . map ( a => a [ i ])) ],[ R , T ],[ D = m => A ( s = y + x - 1 ,( _ , i )=> A ( x ,( _ , j )=>( m [ s - i - j - 1 ] || [] )[ j ]). map ( x => x != undefined ? x : ' ' ))],[ D , R ] ,[ R , D ],[ R , D , R ]]. reduce (( k , F )=> k ? k : ( N = ( f = q => F . reduce (( a , b )=> b ( a ) , q ) )( m ). reduce (( c , r , i )=> c ? c : ( l = r . join ( '' ). indexOf ( w )) >= 0 ? [ l , i ] : 0 , 0 ) ) ? [ f , ... N ] : 0 , 0 ))))([ x , y ] = nxn . split ( 'x' ) . map ( p => parseInt ( p )) , P . slice ( 0 , x ). map ( x => x . split ( ' ' )), P . slice ( x ),( d , Q )=> Array ( d ). fill (). map ( Q ) ))(... p . split ( '\\n' )) even formatted into the company's logo! just run ALPHABET_SOUP . Day 2 Today I set up nginx for my home computer since I've migrated to nix. I went from like 6 config files to 1. See the relevant file here: https://github.com/dmadisetti/.dots/blob/template/nix/machines/common/nginx.nix You got this. The above is just a sample.","title":"docs/dylan!.md"},{"location":"dylan%21/#100-days-of-code","text":"","title":"100 Days of code"},{"location":"dylan%21/#a-personal-log-by-dylan","text":"","title":"a personal log by dylan!"},{"location":"dylan%21/#day-0","text":"Set up basic template for https://github.com/baltimoreblacktechies/100daysOfCode ! I have ideas for how to extend this based off previous work I've done.","title":"Day 0"},{"location":"dylan%21/#day-1","text":"Today I went to a Coffee and Code meetup at spark. I didn't really work too much during the time, but someone put me on to an interview question which they said couldn't be solved in a line of code. Lol, saying you can't do something is a sure-fire way of getting me to do it. Here's my line: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const ALPHABET_SOUP = p =>(( nxn ,... P )=>(( _ , m , W , A )=> W . map ( w =>(( f , v , e )=> console . log ( w ,( L = c => f (( Z = ( a , b )=> A ( a ,( _ , i )=> Array ( b ). fill ( i )))( x , y ))[ e ][ c ] + \":\" + ( f ( T ( Z ( y , x )))[ e ][ c ]))( v ), L ( v + w . length - 1 )))(...[[ m => m ], [ R = m => m . map ( r =>[ ... r ][ \"r\" + \"everse\" ]())],[ T = m => m . map (( _ , i )=> m . map ( a => a [ i ])) ],[ R , T ],[ D = m => A ( s = y + x - 1 ,( _ , i )=> A ( x ,( _ , j )=>( m [ s - i - j - 1 ] || [] )[ j ]). map ( x => x != undefined ? x : ' ' ))],[ D , R ] ,[ R , D ],[ R , D , R ]]. reduce (( k , F )=> k ? k : ( N = ( f = q => F . reduce (( a , b )=> b ( a ) , q ) )( m ). reduce (( c , r , i )=> c ? c : ( l = r . join ( '' ). indexOf ( w )) >= 0 ? [ l , i ] : 0 , 0 ) ) ? [ f , ... N ] : 0 , 0 ))))([ x , y ] = nxn . split ( 'x' ) . map ( p => parseInt ( p )) , P . slice ( 0 , x ). map ( x => x . split ( ' ' )), P . slice ( x ),( d , Q )=> Array ( d ). fill (). map ( Q ) ))(... p . split ( '\\n' )) even formatted into the company's logo! just run ALPHABET_SOUP .","title":"Day 1"},{"location":"dylan%21/#day-2","text":"Today I set up nginx for my home computer since I've migrated to nix. I went from like 6 config files to 1. See the relevant file here: https://github.com/dmadisetti/.dots/blob/template/nix/machines/common/nginx.nix","title":"Day 2"},{"location":"dylan%21/#you-got-this-the-above-is-just-a-sample","text":"","title":"You got this. The above is just a sample."}]}